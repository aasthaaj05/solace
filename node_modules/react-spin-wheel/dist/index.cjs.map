{"version":3,"sources":["../src/spinwheel/index.tsx"],"names":["useState","Fragment","jsx","jsxs","createColorGenerator","colorArray","colors","currentIndex","color","demoOptionData","SpinWheel","itemColors","borderColor","items","spinActionName","resetActionName","size","spinTime","onResult","onFinishSpin","onReset","spinContainerStyle","spinWheelStyle","spinButtonStyle","resetButtonStyle","spinFontStyle","spinItemStyle","getColor","initState","setInitState","randIndex","setRandIndex","isFinished","setIsFinished","sidePercent","randItemIndex","item","index"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport { ColorArray, SpinWheelProps } from \"./types\";\r\nimport \"./style.css\";\r\n\r\nfunction createColorGenerator(colorArray?: ColorArray) {\r\n  const colors: ColorArray = colorArray?.length\r\n    ? colorArray\r\n    : [\"#ff0f7b\", \"#ff930f\", \"#45caff\", \"red\", \"blue\"];\r\n  let currentIndex = 0;\r\n\r\n  return function () {\r\n    const color = colors[currentIndex];\r\n    currentIndex = (currentIndex + 1) % colors.length;\r\n    return color;\r\n  };\r\n}\r\n\r\nconst demoOptionData = [\r\n  {\r\n    name: \"happy\",\r\n  },\r\n  {\r\n    name: \"fortunate\",\r\n  },\r\n  {\r\n    name: \"blessed\",\r\n  },\r\n  {\r\n    name: \"gifted\",\r\n  },\r\n  {\r\n    name: \"promising\",\r\n  },\r\n  {\r\n    name: \"favored\",\r\n  },\r\n  {\r\n    name: \"good\",\r\n  },\r\n];\r\n\r\nexport const SpinWheel = ({\r\n  itemColors = [],\r\n  borderColor = \"#666\",\r\n  items = demoOptionData,\r\n  spinActionName = \"spin\",\r\n  resetActionName = \"reset\",\r\n  size = 400,\r\n  spinTime = 3000,\r\n  onResult,\r\n  onFinishSpin,\r\n  onReset,\r\n  spinContainerStyle,\r\n  spinWheelStyle,\r\n  spinButtonStyle,\r\n  resetButtonStyle,\r\n  spinFontStyle,\r\n  spinItemStyle,\r\n}: SpinWheelProps) => {\r\n  const getColor = createColorGenerator(itemColors);\r\n\r\n  const [initState, setInitState] = useState(true);\r\n  const [randIndex, setRandIndex] = useState(0);\r\n  const [isFinished, setIsFinished] = useState(true);\r\n  const sidePercent =\r\n    ((size - Math.tan((45 - 360 / items.length / 2) * (Math.PI / 180)) * size) /\r\n      size) *\r\n    100;\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"spin-container\"\r\n        style={{\r\n          width: size,\r\n          height: size,\r\n          boxShadow: `0 0 15px #333 inset, 0 0 15px ${borderColor}`,\r\n          ...spinContainerStyle,\r\n        }}\r\n      >\r\n        {initState ? (\r\n          <button\r\n            title=\"Spin\"\r\n            className=\"spin-button\"\r\n            style={{ ...spinButtonStyle }}\r\n            onClick={() => {\r\n              const randItemIndex = Math.floor(Math.random() * items.length);\r\n              onResult?.(items[randItemIndex]);\r\n              setIsFinished(false);\r\n              setTimeout(() => {\r\n                onFinishSpin?.(items[randItemIndex]);\r\n                setIsFinished(true);\r\n              }, spinTime);\r\n              setInitState(false);\r\n              setRandIndex(randItemIndex);\r\n            }}\r\n          >\r\n            {spinActionName}\r\n          </button>\r\n        ) : (\r\n          <button\r\n            title=\"Reset\"\r\n            className=\"spin-button\"\r\n            style={{ ...resetButtonStyle }}\r\n            onClick={() => {\r\n              onReset?.();\r\n              setInitState(true);\r\n              setRandIndex(0);\r\n            }}\r\n            disabled={!isFinished}\r\n          >\r\n            {resetActionName}\r\n          </button>\r\n        )}\r\n        <div\r\n          className=\"spin-wheel\"\r\n          style={{\r\n            border: `solid 5px ${borderColor}`,\r\n            transform: initState\r\n              ? \"rotate(0deg)\"\r\n              : `rotate(-${720 + randIndex * (360 / items.length)}deg)`,\r\n            transition: !initState\r\n              ? `transform ${Math.floor(spinTime / 1000)}s ease`\r\n              : \"none\",\r\n            ...spinWheelStyle,\r\n          }}\r\n        >\r\n          {items.map((item, index) => (\r\n            <div\r\n              key={typeof item === \"string\" ? item : item.name}\r\n              className=\"option\"\r\n              style={{\r\n                backgroundColor: getColor(),\r\n                transform: `rotate(${(360 / items.length) * index + 45}deg)`,\r\n                clipPath: `polygon(0 0, ${sidePercent}% 0, 100% 100%, 0 ${sidePercent}%)`,\r\n                ...spinItemStyle,\r\n              }}\r\n            >\r\n              <span\r\n                style={{\r\n                  ...spinFontStyle,\r\n                }}\r\n              >\r\n                {typeof item === \"string\" ? item : item.name}\r\n              </span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};"]}