{
  "version": 3,
  "sources": ["../../react-spin-wheel/src/spinwheel/index.tsx"],
  "sourcesContent": ["import { useState } from \"react\";\r\nimport { ColorArray, SpinWheelProps } from \"./types\";\r\nimport \"./style.css\";\r\n\r\nfunction createColorGenerator(colorArray?: ColorArray) {\r\n  const colors: ColorArray = colorArray?.length\r\n    ? colorArray\r\n    : [\"#ff0f7b\", \"#ff930f\", \"#45caff\", \"red\", \"blue\"];\r\n  let currentIndex = 0;\r\n\r\n  return function () {\r\n    const color = colors[currentIndex];\r\n    currentIndex = (currentIndex + 1) % colors.length;\r\n    return color;\r\n  };\r\n}\r\n\r\nconst demoOptionData = [\r\n  {\r\n    name: \"happy\",\r\n  },\r\n  {\r\n    name: \"fortunate\",\r\n  },\r\n  {\r\n    name: \"blessed\",\r\n  },\r\n  {\r\n    name: \"gifted\",\r\n  },\r\n  {\r\n    name: \"promising\",\r\n  },\r\n  {\r\n    name: \"favored\",\r\n  },\r\n  {\r\n    name: \"good\",\r\n  },\r\n];\r\n\r\nexport const SpinWheel = ({\r\n  itemColors = [],\r\n  borderColor = \"#666\",\r\n  items = demoOptionData,\r\n  spinActionName = \"spin\",\r\n  resetActionName = \"reset\",\r\n  size = 400,\r\n  spinTime = 3000,\r\n  onResult,\r\n  onFinishSpin,\r\n  onReset,\r\n  spinContainerStyle,\r\n  spinWheelStyle,\r\n  spinButtonStyle,\r\n  resetButtonStyle,\r\n  spinFontStyle,\r\n  spinItemStyle,\r\n}: SpinWheelProps) => {\r\n  const getColor = createColorGenerator(itemColors);\r\n\r\n  const [initState, setInitState] = useState(true);\r\n  const [randIndex, setRandIndex] = useState(0);\r\n  const [isFinished, setIsFinished] = useState(true);\r\n  const sidePercent =\r\n    ((size - Math.tan((45 - 360 / items.length / 2) * (Math.PI / 180)) * size) /\r\n      size) *\r\n    100;\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"spin-container\"\r\n        style={{\r\n          width: size,\r\n          height: size,\r\n          boxShadow: `0 0 15px #333 inset, 0 0 15px ${borderColor}`,\r\n          ...spinContainerStyle,\r\n        }}\r\n      >\r\n        {initState ? (\r\n          <button\r\n            title=\"Spin\"\r\n            className=\"spin-button\"\r\n            style={{ ...spinButtonStyle }}\r\n            onClick={() => {\r\n              const randItemIndex = Math.floor(Math.random() * items.length);\r\n              onResult?.(items[randItemIndex]);\r\n              setIsFinished(false);\r\n              setTimeout(() => {\r\n                onFinishSpin?.(items[randItemIndex]);\r\n                setIsFinished(true);\r\n              }, spinTime);\r\n              setInitState(false);\r\n              setRandIndex(randItemIndex);\r\n            }}\r\n          >\r\n            {spinActionName}\r\n          </button>\r\n        ) : (\r\n          <button\r\n            title=\"Reset\"\r\n            className=\"spin-button\"\r\n            style={{ ...resetButtonStyle }}\r\n            onClick={() => {\r\n              onReset?.();\r\n              setInitState(true);\r\n              setRandIndex(0);\r\n            }}\r\n            disabled={!isFinished}\r\n          >\r\n            {resetActionName}\r\n          </button>\r\n        )}\r\n        <div\r\n          className=\"spin-wheel\"\r\n          style={{\r\n            border: `solid 5px ${borderColor}`,\r\n            transform: initState\r\n              ? \"rotate(0deg)\"\r\n              : `rotate(-${720 + randIndex * (360 / items.length)}deg)`,\r\n            transition: !initState\r\n              ? `transform ${Math.floor(spinTime / 1000)}s ease`\r\n              : \"none\",\r\n            ...spinWheelStyle,\r\n          }}\r\n        >\r\n          {items.map((item, index) => (\r\n            <div\r\n              key={typeof item === \"string\" ? item : item.name}\r\n              className=\"option\"\r\n              style={{\r\n                backgroundColor: getColor(),\r\n                transform: `rotate(${(360 / items.length) * index + 45}deg)`,\r\n                clipPath: `polygon(0 0, ${sidePercent}% 0, 100% 100%, 0 ${sidePercent}%)`,\r\n                ...spinItemStyle,\r\n              }}\r\n            >\r\n              <span\r\n                style={{\r\n                  ...spinFontStyle,\r\n                }}\r\n              >\r\n                {typeof item === \"string\" ? item : item.name}\r\n              </span>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};"],
  "mappings": "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",
  "names": ["useState", "jsxs", "colorArray", "currentIndex", "colors", "color", "demoOptionData", "SpinWheel", "spinActionName", "spinTime", "spinWheelStyle", "getColor", "sidePercent", "items", "size", "spinContainerStyle", "randItemIndex", "setIsFinished", "onFinishSpin", "setRandIndex", "onReset", "resetActionName", "initState", "index", "jsx", "item"]
}
