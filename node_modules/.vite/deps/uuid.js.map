{
  "version": 3,
  "sources": ["../../uuid/lib/rng-browser.js", "../../uuid/lib/bytesToUuid.js", "../../uuid/v1.js", "../../uuid/v4.js", "../../uuid/index.js"],
  "sourcesContent": ["// Unique ID creation requires a high quality random # generator.  In the\r\n// browser this is a little complicated due to unknown quality of Math.random()\r\n// and inconsistent support for the `crypto` API.  We do the best we can via\r\n// feature-detection\r\n\r\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\r\n// implementation. Also, find the complete implementation of crypto on IE11.\r\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\r\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\r\n\r\nif (getRandomValues) {\r\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\r\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\r\n\r\n  module.exports = function whatwgRNG() {\r\n    getRandomValues(rnds8);\r\n    return rnds8;\r\n  };\r\n} else {\r\n  // Math.random()-based (RNG)\r\n  //\r\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\r\n  // quality.\r\n  var rnds = new Array(16);\r\n\r\n  module.exports = function mathRNG() {\r\n    for (var i = 0, r; i < 16; i++) {\r\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\r\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\r\n    }\r\n\r\n    return rnds;\r\n  };\r\n}\r\n", "/**\r\n * Convert array of 16 byte values to UUID string format of the form:\r\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\r\n */\r\nvar byteToHex = [];\r\nfor (var i = 0; i < 256; ++i) {\r\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\r\n}\r\n\r\nfunction bytesToUuid(buf, offset) {\r\n  var i = offset || 0;\r\n  var bth = byteToHex;\r\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\r\n  return ([\r\n    bth[buf[i++]], bth[buf[i++]],\r\n    bth[buf[i++]], bth[buf[i++]], '-',\r\n    bth[buf[i++]], bth[buf[i++]], '-',\r\n    bth[buf[i++]], bth[buf[i++]], '-',\r\n    bth[buf[i++]], bth[buf[i++]], '-',\r\n    bth[buf[i++]], bth[buf[i++]],\r\n    bth[buf[i++]], bth[buf[i++]],\r\n    bth[buf[i++]], bth[buf[i++]]\r\n  ]).join('');\r\n}\r\n\r\nmodule.exports = bytesToUuid;\r\n", "var rng = require('./lib/rng');\r\nvar bytesToUuid = require('./lib/bytesToUuid');\r\n\r\n// **`v1()` - Generate time-based UUID**\r\n//\r\n// Inspired by https://github.com/LiosK/UUID.js\r\n// and http://docs.python.org/library/uuid.html\r\n\r\nvar _nodeId;\r\nvar _clockseq;\r\n\r\n// Previous uuid creation time\r\nvar _lastMSecs = 0;\r\nvar _lastNSecs = 0;\r\n\r\n// See https://github.com/uuidjs/uuid for API details\r\nfunction v1(options, buf, offset) {\r\n  var i = buf && offset || 0;\r\n  var b = buf || [];\r\n\r\n  options = options || {};\r\n  var node = options.node || _nodeId;\r\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\r\n\r\n  // node and clockseq need to be initialized to random values if they're not\r\n  // specified.  We do this lazily to minimize issues related to insufficient\r\n  // system entropy.  See #189\r\n  if (node == null || clockseq == null) {\r\n    var seedBytes = rng();\r\n    if (node == null) {\r\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\r\n      node = _nodeId = [\r\n        seedBytes[0] | 0x01,\r\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\r\n      ];\r\n    }\r\n    if (clockseq == null) {\r\n      // Per 4.2.2, randomize (14 bit) clockseq\r\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\r\n    }\r\n  }\r\n\r\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\r\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\r\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\r\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\r\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\r\n\r\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\r\n  // cycle to simulate higher resolution clock\r\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\r\n\r\n  // Time since last uuid creation (in msecs)\r\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\r\n\r\n  // Per 4.2.1.2, Bump clockseq on clock regression\r\n  if (dt < 0 && options.clockseq === undefined) {\r\n    clockseq = clockseq + 1 & 0x3fff;\r\n  }\r\n\r\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\r\n  // time interval\r\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\r\n    nsecs = 0;\r\n  }\r\n\r\n  // Per 4.2.1.2 Throw error if too many uuids are requested\r\n  if (nsecs >= 10000) {\r\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\r\n  }\r\n\r\n  _lastMSecs = msecs;\r\n  _lastNSecs = nsecs;\r\n  _clockseq = clockseq;\r\n\r\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\r\n  msecs += 12219292800000;\r\n\r\n  // `time_low`\r\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\r\n  b[i++] = tl >>> 24 & 0xff;\r\n  b[i++] = tl >>> 16 & 0xff;\r\n  b[i++] = tl >>> 8 & 0xff;\r\n  b[i++] = tl & 0xff;\r\n\r\n  // `time_mid`\r\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\r\n  b[i++] = tmh >>> 8 & 0xff;\r\n  b[i++] = tmh & 0xff;\r\n\r\n  // `time_high_and_version`\r\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\r\n  b[i++] = tmh >>> 16 & 0xff;\r\n\r\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\r\n  b[i++] = clockseq >>> 8 | 0x80;\r\n\r\n  // `clock_seq_low`\r\n  b[i++] = clockseq & 0xff;\r\n\r\n  // `node`\r\n  for (var n = 0; n < 6; ++n) {\r\n    b[i + n] = node[n];\r\n  }\r\n\r\n  return buf ? buf : bytesToUuid(b);\r\n}\r\n\r\nmodule.exports = v1;\r\n", "var rng = require('./lib/rng');\r\nvar bytesToUuid = require('./lib/bytesToUuid');\r\n\r\nfunction v4(options, buf, offset) {\r\n  var i = buf && offset || 0;\r\n\r\n  if (typeof(options) == 'string') {\r\n    buf = options === 'binary' ? new Array(16) : null;\r\n    options = null;\r\n  }\r\n  options = options || {};\r\n\r\n  var rnds = options.random || (options.rng || rng)();\r\n\r\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\r\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\r\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\r\n\r\n  // Copy bytes to buffer, if provided\r\n  if (buf) {\r\n    for (var ii = 0; ii < 16; ++ii) {\r\n      buf[i + ii] = rnds[ii];\r\n    }\r\n  }\r\n\r\n  return buf || bytesToUuid(rnds);\r\n}\r\n\r\nmodule.exports = v4;\r\n", "var v1 = require('./v1');\r\nvar v4 = require('./v4');\r\n\r\nvar uuid = v4;\r\nuuid.v1 = v1;\r\nuuid.v4 = v4;\r\n\r\nmodule.exports = uuid;\r\n"],
  "mappings": "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",
  "names": ["i"]
}
